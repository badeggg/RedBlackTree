const tap = require('tap');
const RedBlackTree = require('../../RedBlackTree.js');

tap.test('successor', async tap => {
    let tree = new RedBlackTree(
        (v1, v2) => v1.start > v2.start,
        (v1, v2) => v1.start === v2.start,
    );
    const o0 = { start: 0 };
    const o1 = { start: 1 };
    const o2 = { start: 2 };
    const o3 = { start: 3 };
    const o4 = { start: 4 };
    const o5 = { start: 5 };
    const o6 = { start: 6 };
    const o7 = { start: 7 };
    const o8 = { start: 8 };
    const o9 = { start: 9 };
    const o10 = { start: 10 };
    const o11 = { start: 11 };
    const o12 = { start: 12 };
    const o13 = { start: 13 };
    const o14 = { start: 14 };
    const o15 = { start: 15 };
    const o16 = { start: 16 };
    const o17 = { start: 17 };
    const o18 = { start: 18 };
    const o19 = { start: 19 };
    const o20 = { start: 20 };
    const o21 = { start: 21 };
    const o22 = { start: 22 };
    const o23 = { start: 23 };
    const o24 = { start: 24 };
    const o25 = { start: 25 };
    const o26 = { start: 26 };
    const o27 = { start: 27 };
    const o28 = { start: 28 };
    const o29 = { start: 29 };
    const o30 = { start: 30 };

    tree.insert(o0);
    tree.insert(o1);
    tree.insert(o2);
    tree.insert(o3);
    tree.insert(o4);
    tree.insert(o5);
    tree.insert(o6);
    tree.insert(o7);
    tree.insert(o8);
    tree.insert(o9);
    tree.insert(o10);
    tree.insert(o11);
    tree.insert(o12);
    tree.insert(o13);
    tree.insert(o14);
    tree.insert(o15);
    tree.insert(o16);
    tree.insert(o17);
    tree.insert(o18);
    tree.insert(o19);
    tree.insert(o20);
    tree.insert(o21);
    tree.insert(o22);
    tree.insert(o23);
    tree.insert(o24);
    tree.insert(o25);
    tree.insert(o26);
    tree.insert(o27);
    tree.insert(o28);
    tree.insert(o29);
    tree.insert(o30);

    tap.equal(tree.successor(o30), null);
    tap.equal(tree.successor(o4), o5);

    tap.equal(tree.successor({ start: 30 }), null);
    tap.equal(tree.successor({ start: 4 }), o5);

    tap.equal(tree.successor({ start: -1 }), o0);
    tap.equal(tree.successor({ start: 0.5 }), o1);
    tap.equal(tree.successor({ start: 1.5 }), o2);
    tap.equal(tree.successor({ start: 2.5 }), o3);
    tap.equal(tree.successor({ start: 3.5 }), o4);
    tap.equal(tree.successor({ start: 4.5 }), o5);
    tap.equal(tree.successor({ start: 5.5 }), o6);
    tap.equal(tree.successor({ start: 6.5 }), o7);
    tap.equal(tree.successor({ start: 7.5 }), o8);
    tap.equal(tree.successor({ start: 8.5 }), o9);
    tap.equal(tree.successor({ start: 9.5 }), o10);
    tap.equal(tree.successor({ start: 10.5 }), o11);
    tap.equal(tree.successor({ start: 11.5 }), o12);
    tap.equal(tree.successor({ start: 12.5 }), o13);
    tap.equal(tree.successor({ start: 13.5 }), o14);
    tap.equal(tree.successor({ start: 14.5 }), o15);
    tap.equal(tree.successor({ start: 15.5 }), o16);
    tap.equal(tree.successor({ start: 16.5 }), o17);
    tap.equal(tree.successor({ start: 17.5 }), o18);
    tap.equal(tree.successor({ start: 18.5 }), o19);
    tap.equal(tree.successor({ start: 19.5 }), o20);
    tap.equal(tree.successor({ start: 20.5 }), o21);
    tap.equal(tree.successor({ start: 21.5 }), o22);
    tap.equal(tree.successor({ start: 22.5 }), o23);
    tap.equal(tree.successor({ start: 23.5 }), o24);
    tap.equal(tree.successor({ start: 24.5 }), o25);
    tap.equal(tree.successor({ start: 25.5 }), o26);
    tap.equal(tree.successor({ start: 26.5 }), o27);
    tap.equal(tree.successor({ start: 27.5 }), o28);
    tap.equal(tree.successor({ start: 28.5 }), o29);
    tap.equal(tree.successor({ start: 29.5 }), o30);
    tap.equal(tree.successor({ start: 30.5 }), null);
});
