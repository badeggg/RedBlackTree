const tap = require('tap');
const RedBlackTree = require('../../RedBlackTree.js');

tap.test('indexInSortedArray basic', async tap => {
    let tree = new RedBlackTree(
        (v1, v2) => v1.start > v2.start,
        (v1, v2) => v1.start === v2.start,
    );

    tap.equal(tree.indexInSortedArray(0), -1);

    tap.equal(tree.max, null);
    tap.equal(tree.min, null);
    tap.equal(tree.count, 0);

    tree.insert({ start: 0 });
    tree.insert({ start: 1 });
    tree.insert({ start: 2 });
    tree.insert({ start: 3 });
    tree.insert({ start: 4 });
    tree.insert({ start: 5 });
    tree.insert({ start: 6 });
    tree.insert({ start: 7 });
    tree.insert({ start: 8 });
    tree.insert({ start: 9 });
    tree.insert({ start: 10 });
    tree.insert({ start: 11 });
    tree.insert({ start: 12 });
    tree.insert({ start: 13 });
    tree.insert({ start: 14 });
    tree.insert({ start: 15 });
    tree.insert({ start: 16 });
    tree.insert({ start: 17 });
    tree.insert({ start: 18 });
    tree.insert({ start: 19 });
    tree.insert({ start: 20 });
    tree.insert({ start: 21 });
    tree.insert({ start: 22 });
    tree.insert({ start: 23 });
    tree.insert({ start: 24 });
    tree.insert({ start: 25 });
    tree.insert({ start: 26 });
    tree.insert({ start: 27 });
    tree.insert({ start: 28 });
    tree.insert({ start: 29 });
    tree.insert({ start: 30 });
    tree.insert({ start: 31 });
    tree.insert({ start: 32 });
    tree.insert({ start: 33 });
    tree.insert({ start: 34 });
    tree.insert({ start: 35 });
    tree.insert({ start: 36 });
    tree.insert({ start: 37 });
    tree.insert({ start: 38 });
    tree.insert({ start: 39 });
    tree.insert({ start: 40 });
    tree.insert({ start: 41 });
    tree.insert({ start: 42 });
    tree.insert({ start: 43 });
    tree.insert({ start: 44 });
    tree.insert({ start: 45 });
    tree.insert({ start: 46 });
    tree.insert({ start: 47 });
    tree.insert({ start: 48 });
    tree.insert({ start: 49 });
    tree.insert({ start: 50 });
    tree.insert({ start: 51 });
    tree.insert({ start: 52 });
    tree.insert({ start: 53 });
    tree.insert({ start: 54 });
    tree.insert({ start: 55 });
    tree.insert({ start: 56 });
    tree.insert({ start: 57 });
    tree.insert({ start: 58 });
    tree.insert({ start: 59 });
    tree.insert({ start: 60 });
    tree.insert({ start: 61 });
    tree.insert({ start: 62 });
    tree.insert({ start: 63 });
    tree.insert({ start: 64 });
    tree.insert({ start: 65 });
    tree.insert({ start: 66 });
    tree.insert({ start: 67 });
    tree.insert({ start: 68 });
    tree.insert({ start: 69 });
    tree.insert({ start: 70 });
    tree.insert({ start: 71 });
    tree.insert({ start: 72 });
    tree.insert({ start: 73 });
    tree.insert({ start: 74 });
    tree.insert({ start: 75 });
    tree.insert({ start: 76 });
    tree.insert({ start: 77 });
    tree.insert({ start: 78 });
    tree.insert({ start: 79 });
    tree.insert({ start: 80 });
    tree.insert({ start: 81 });
    tree.insert({ start: 82 });
    tree.insert({ start: 83 });
    tree.insert({ start: 84 });
    tree.insert({ start: 85 });
    tree.insert({ start: 86 });
    tree.insert({ start: 87 });
    tree.insert({ start: 88 });
    tree.insert({ start: 89 });
    tree.insert({ start: 90 });
    tree.insert({ start: 91 });
    tree.insert({ start: 92 });
    tree.insert({ start: 93 });
    tree.insert({ start: 94 });
    tree.insert({ start: 95 });
    tree.insert({ start: 96 });
    tree.insert({ start: 97 });
    tree.insert({ start: 98 });
    tree.insert({ start: 99 });
    tree.insert({ start: 100 });

    tap.match(tree.max, { start: 100 });
    tap.match(tree.min, { start: 0 });
    tap.equal(tree.count, 101);

    tap.equal(tree.indexInSortedArray({ start: 0 }), 0);
    tap.equal(tree.indexInSortedArray({ start: 6 }), 6);
    tap.equal(tree.indexInSortedArray({ start: 88 }), 88);
    tap.equal(tree.indexInSortedArray({ start: 100 }), 100);
    tap.equal(tree.indexInSortedArray({ start: 999 }), -1);
});
