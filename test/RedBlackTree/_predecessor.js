const tap = require('tap');
const RedBlackTree = require('../../RedBlackTree.js');

tap.test('_predecessor basic', async tap => {
    let tree = new RedBlackTree((v1, v2) => v1 > v2, (v1, v2) => v1 === v2);

    tree.insert(0);
    tree.insert(1);
    tree.insert(2);
    tree.insert(3);
    tree.insert(4);
    tree.insert(5);
    tree.insert(6);
    tree.insert(7);
    tree.insert(8);
    tree.insert(9);
    tree.insert(10);
    tree.insert(11);
    tree.insert(12);
    tree.insert(13);
    tree.insert(14);
    tree.insert(15);
    tree.insert(16);
    tree.insert(17);
    tree.insert(18);
    tree.insert(19);
    tree.insert(20);
    tree.insert(21);
    tree.insert(22);
    tree.insert(23);
    tree.insert(24);
    tree.insert(25);
    tree.insert(26);
    tree.insert(27);
    tree.insert(28);
    tree.insert(29);
    tree.insert(30);

    tap.equal(tree._predecessor(tree._contents.get(0)), tree.NIL);
    tap.equal(tree._predecessor(tree._contents.get(1)), tree._contents.get(0));
    tap.equal(tree._predecessor(tree._contents.get(2)), tree._contents.get(1));
    tap.equal(tree._predecessor(tree._contents.get(3)), tree._contents.get(2));
    tap.equal(tree._predecessor(tree._contents.get(4)), tree._contents.get(3));
    tap.equal(tree._predecessor(tree._contents.get(5)), tree._contents.get(4));
    tap.equal(tree._predecessor(tree._contents.get(6)), tree._contents.get(5));
    tap.equal(tree._predecessor(tree._contents.get(7)), tree._contents.get(6));
    tap.equal(tree._predecessor(tree._contents.get(8)), tree._contents.get(7));
    tap.equal(tree._predecessor(tree._contents.get(9)), tree._contents.get(8));
    tap.equal(tree._predecessor(tree._contents.get(10)), tree._contents.get(9));
    tap.equal(tree._predecessor(tree._contents.get(11)), tree._contents.get(10));
    tap.equal(tree._predecessor(tree._contents.get(12)), tree._contents.get(11));
    tap.equal(tree._predecessor(tree._contents.get(13)), tree._contents.get(12));
    tap.equal(tree._predecessor(tree._contents.get(14)), tree._contents.get(13));
    tap.equal(tree._predecessor(tree._contents.get(15)), tree._contents.get(14));
    tap.equal(tree._predecessor(tree._contents.get(16)), tree._contents.get(15));
    tap.equal(tree._predecessor(tree._contents.get(17)), tree._contents.get(16));
    tap.equal(tree._predecessor(tree._contents.get(18)), tree._contents.get(17));
    tap.equal(tree._predecessor(tree._contents.get(19)), tree._contents.get(18));
    tap.equal(tree._predecessor(tree._contents.get(20)), tree._contents.get(19));
    tap.equal(tree._predecessor(tree._contents.get(21)), tree._contents.get(20));
    tap.equal(tree._predecessor(tree._contents.get(22)), tree._contents.get(21));
    tap.equal(tree._predecessor(tree._contents.get(23)), tree._contents.get(22));
    tap.equal(tree._predecessor(tree._contents.get(24)), tree._contents.get(23));
    tap.equal(tree._predecessor(tree._contents.get(25)), tree._contents.get(24));
    tap.equal(tree._predecessor(tree._contents.get(26)), tree._contents.get(25));
    tap.equal(tree._predecessor(tree._contents.get(27)), tree._contents.get(26));
    tap.equal(tree._predecessor(tree._contents.get(28)), tree._contents.get(27));
    tap.equal(tree._predecessor(tree._contents.get(29)), tree._contents.get(28));
    tap.equal(tree._predecessor(tree._contents.get(30)), tree._contents.get(29));
});
